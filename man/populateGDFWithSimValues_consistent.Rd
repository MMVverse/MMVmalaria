% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/19-IQRaux.R
\name{populateGDFWithSimValues_consistent}
\alias{populateGDFWithSimValues_consistent}
\title{Simulate DV values and place them into a dataGENERAL}
\usage{
populateGDFWithSimValues_consistent(
  dataGEN,
  model,
  regression = NULL,
  abs0inputs = NULL,
  abs0Tk0param = NULL
)
}
\arguments{
\item{dataGEN}{An \code{\link[IQRtools:IQRdataGENERAL]{IQRtools::IQRdataGENERAL()}}}

\item{model}{An \code{\link[IQRtools:IQRmodel]{IQRtools::IQRmodel()}}}

\item{regression}{Character vector}

\item{abs0inputs}{Character vector of abs0inputs (see \code{\link[IQRtools:IQReventTable]{IQRtools::IQReventTable()}})}

\item{abs0Tk0param}{Character vector of abs0 parameters (see \code{\link[IQRtools:IQReventTable]{IQRtools::IQReventTable()}})}
}
\value{
The \code{dataGEN} with modified DV and VALUE column
}
\description{
The dataGEN most likely should come from \code{\link[=create_GDF_fromDesignSpec]{create_GDF_fromDesignSpec()}}.
You can add individual parameters to simulate based on individuals.
Simulated values will be placed into the respective VALUE and DV entries of the dataGEN.
}
\examples{
library(ggplot2)
library(IQRtools)

# Step 1: Get model

model <-IQRtools::IQRmodel(file.path(get_MMVmalariaPath(subdir="inst"),"modelLibrary/PKmodels/model_2cpt_linsat_iv.txt"))
# Step 2: Create empty dataGEN
design <- list(
  time = list(
    group1 = list(
      OUTPUT1 = c(1, 2, 5, 10)
    ),
    group2 = list(
      OUTPUT1 = c(1, 2, 5, 10)
    )
  ),
  dosing = list(
    group1 = IQRtools::IQRdosing(
      TIME = 0, ADM = 1, AMT = 40, TINF = 0
    ),
    group2 = IQRtools::IQRdosing(
      TIME = 0, ADM = 1, AMT = 40, TINF = 0
    )),
  groupsize = list(
    group1 = 10, group2 = 10
  )
)
dataGEN <- create_GDF_fromDesignSpec(design)

# Step 2.1: Add some individual parameters
gpf <- IQRtools::generate_GPFfromIQRmodel(model)
estimates <- gpf$estimates
estimates[VALUE > 0,`:=`(IIV = 0.1)] # Update IIV Value
gpf <- IQRtools::GPF(estimates = estimates)
indPars <- sample_GPF(gpf, Nsamples = length(unique(dataGEN$ID)), FLAGid = TRUE)
indPars <- indPars$indParamValues
dataGEN <- merge(dataGEN, indPars, by = "ID")
dataGEN <- IQRdataGENERAL(dataGEN)

# Step 3: Populate dataGEN
dataGENsim <- populateGDFWithSimValues_consistent(dataGEN, model, regression = setdiff(names(indPars), "ID"), abs0inputs = NULL, abs0Tk0param = NULL)

# Visualize
IQRtools::IQRggplot(dataGENsim, aes(TIME, DV, group = USUBJID)) +
  facet_wrap(~TRTNAME, scales = "free") +
  geom_line() +
  labs(title = "Simulated data (no residual error)")
}
\seealso{
Other IQRdataGENERAL: 
\code{\link{create_GDF_fromDesignSpec}()}

Other Simulation: 
\code{\link{create_GDF_fromDesignSpec}()}
}
\author{
Daniel Lill (daniel.lill@intiquan.com)
}
\concept{IQRdataGENERAL}
\concept{Simulation}
